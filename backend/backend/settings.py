"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 4.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""
import os
import json
import sys
import environ
import logging.config
from pathlib import Path
env = environ.FileAwareEnv(
    # set casting, default value
    DEBUG=(bool, False)
)
print('.env: ', env.__dict__)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
environ.Env.read_env(os.path.join(BASE_DIR, '.env'))
#
# # Build paths inside the project like this: BASE_DIR / 'subdir'.
# BASE_DIR = Path(__file__).resolve().parent.parent
print('BASE_DIR ', BASE_DIR)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env("DJANGO_SECRET_KEY")
print('DJANGO_SECRET_KEY', SECRET_KEY)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env("DEBUG")

DJANGO_ALLOWED_HOSTS = str(env("DJANGO_ALLOWED_HOSTS")).split(" ")
print('"DJANGO_ALLOWED_HOSTS":  ', DJANGO_ALLOWED_HOSTS)




# try:
#     VENV_PATH = os.path.dirname(BASE_DIR)
#     sys.path.append(VENV_PATH)
#     from settings_local_backend import *
#     print('    from settings_local_backend import *')
# except ImportError:
#     print('Not file settings_local_backend.py. Added this file.',   VENV_PATH)


ENGINE = env("POSTGRES_ENGINE")
NAME = env("POSTGRES_DB")
USER = env("POSTGRES_USER")
PASSWORD = env("POSTGRES_PASSWORD")
HOST = env("POSTGRES_HOST")
# HOST = '127.0.0.1'
PORT = env("POSTGRES_PORT")

print("POSTGRES_ENGINE", ENGINE)
print("POSTGRES_DB", NAME)
print("POSTGRES_USER", USER)
print("POSTGRES_PASSWORD", PASSWORD)
print("POSTGRES_HOST", HOST)
print("POSTGRES_PORT", PORT)

# Settings for Docker-compose
DATABASES = {


    # 'default': env.db(),
    'default': {
        'ENGINE': ENGINE,
        'NAME': NAME,
        'USER': USER,
        'PASSWORD': PASSWORD,
        'HOST': HOST,
        'PORT': int(PORT)
    },

    'extra': env.db_url('SQLITE_URL', default='sqlite:////tmp/my-tmp-sqlite.db')
}



# Application definition

INSTALLED_APPS = [
    # added file config
    'mainapp.apps.MainappConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    # 'mainapp',
    'corsheaders',
    'django_filters',
    'storages'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = '/static/'


# if DEBUG:
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static')
]
# else:
VENV_PATH = os.path.dirname(BASE_DIR)
# STATIC_ROOT = os.path.join(VENV_PATH, 'static_root')
STATIC_ROOT = os.path.join(BASE_DIR, 'static_root')

# VENV_PATH = os.path.dirname(BASE_DIR)
# STATIC_ROOT = os.path.join(VENV_PATH, 'static_root')

# MEDIA_URL = 'media/'
# MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

NUMBER_OF_YEARS = [(1, 'Один'), (2, 'Два'), (3, 'Три'), (4, 'Четыре'), (5, 'Пять'), (6, 'Шесть'), (7, 'Семь'),
                   (8, 'Восемь'), (9, 'Девять'), (10, 'Десять'), (11, 'Одиннадцать'), (12, 'Двенадцать'),
                   (13, 'Тринадцать'), (14, 'Четырнадцать'), (15, 'Пятнадцать'), (16, 'Шестнадать'),
                   (17, 'Семнадцать'), (18, 'Восемнадцать'), (19, 'Девятнадцать'), (20, 'Двадцать'),
                   (21, 'Двадцать один'), (22, 'Двадцать два'), (23, 'Двадцать три'), (24, 'Двадцать четыре'),
                   (25, 'Двадцать пять'), (26, 'Двадцать шесть'), (27, 'Двадцать семь'), (28, 'Двадцать восемь'),
                   (29, 'Двадцать девять'), (30, 'Тридцать')]

REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10,
    # 'DEFAULT_AUTHENTICATION_CLASSES': (
    #     'rest_framework.authentication.TokenAuthentication',
    # ),
    # # 'DEFAULT_PERMISSION_CLASSES': (
    # #     'rest_framework.permissions.IsAdminUser',
    # # ),
}

CORS_ORIGIN_ALLOW_ALL = True

CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "http://0.0.0.0:3000",
    "http://localhost:8080",
    "http://10.0.0.133:8080",
    "http://localhost:8000",
    "http://0.0.0.0:8000",
    "http://0.0.0.0:8080",
    "http://localhost:80",
    "http://0.0.0.0:80",
    "http://89.108.71.127:80",
]

ALLOWED_HOSTS = ['*']

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Europe/Moscow'




# Clear prev config
LOGGING_CONFIG = None

# Get loglevel from env
LOGLEVEL = os.getenv('DJANGO_LOGLEVEL', 'info').upper()

logging.config.dictConfig({
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'console': {
            'format': '%(asctime)s %(levelname)s [%(name)s:%(lineno)s] %(module)s %(process)d %(thread)d %(message)s',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'console',
        },
    },
    'loggers': {
        '': {
            'level': LOGLEVEL,
            'handlers': ['console',],
        },
    },
})



